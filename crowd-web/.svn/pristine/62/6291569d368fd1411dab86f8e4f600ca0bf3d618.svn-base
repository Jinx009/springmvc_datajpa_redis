package com.code.controller.pro;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.code.constants.Constants;
import com.code.entity.project.WebProject;
import com.code.entity.user.WebUser;
import com.code.entity.user.WebUserStatus;
import com.code.model.pro.ProjectModel;
import com.code.service.pro.WebProjectService;
import com.code.service.user.WebUserStatusService;
import com.code.tool.api.ApiResult;
import com.code.tool.api.ApiResultUtil;
import com.code.tool.controller.BaseController;

@Controller
@RequestMapping("api/pro")
public class WebProjectController extends BaseController{

	@Autowired
	private WebProjectService webProjectService;
	@Autowired
	private WebUserStatusService webUserStatusService;
	
	/**
	 * 项目详情
	 * @param id
	 * @param profit
	 * @param order
	 * @param leader
	 * @param flag
	 * @param materials
	 * @param contract
	 * @return
	 */
	@RequestMapping(value = "/p/detail",method = RequestMethod.GET)
	@ResponseBody
	public ApiResult detail(@RequestParam("id")long id,
							@RequestParam("profit")int profit,
							@RequestParam("order")int order,
							@RequestParam("leader")int leader,
							@RequestParam("flag")int flag,
							@RequestParam("materials")int materials,
							@RequestParam("contract")int contract,
							@RequestParam("comments")int comment){
		ProjectModel projectModel = webProjectService.details(id, profit, materials, leader, order, flag, contract,comment);
		WebProject webProject = projectModel.getWebProject();
		if(2==webProject.getType()){
			WebUser webUser = (WebUser) getSessionUser();
			if(null==webUser)
				return new ApiResult(false,-3,Constants.SEE_STATUS,"用户未登录！");
			else{
				WebUserStatus webUserStatus = webUserStatusService.get(webUser.getId());
				if(0==webUserStatus.getRealNameStatus())
					return new ApiResult(false,-4,Constants.SEE_STATUS,"用户未实名！");
				if(0==webUserStatus.getInvestorStatus())
					return new ApiResult(false,-5,Constants.SEE_STATUS,"用户合格投资人身份未认证！");
			}
		}
		return new ApiResult(true,0,Constants.PROJECT_DESC,projectModel);
	}
	
	/**
	 * 首页项目信息
	 * @return
	 */
	@RequestMapping(value = "index",method = RequestMethod.GET)
	@ResponseBody
	public ApiResult index(){
		List<WebProject> list = webProjectService.findIndex();
		return new ApiResult(true,0,Constants.PROJECT_DESC,list);
	}
	
	/**
	 * 分类查找项目
	 * @param type
	 * @param site
	 * @return
	 */
	@RequestMapping(value = "list",method = RequestMethod.GET)
	@ResponseBody
	public ApiResult list(@Param("type") int type,@Param("site")int site){
		List<WebProject> list = webProjectService.findByTypeAndSite(type,site);
		return new ApiResult(true,0,Constants.PROJECT_DESC,list);
	}
	
	@RequestMapping(value = "save",method = RequestMethod.POST)
	@ResponseBody
	public ApiResult save(@RequestBody WebProject webProject){
		webProjectService.save(webProject);
		 return ApiResultUtil.successResult(Constants.PROJECT_DESC);
	}
}
