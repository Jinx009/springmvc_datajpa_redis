package com.code.controller.pay;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.code.constants.PayConfig;
import com.code.entity.pay.OrderInfo;
import com.code.entity.pay.PayDataBean;
import com.code.entity.pay.PaymentInfo;
import com.code.entity.pay.RetBean;
import com.code.tool.pay.LLPayUtil;
import com.code.tool.pay.conn.HttpRequestSimple;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * Created by 高雄辉 on 2016/4/20.
 * 卡前置接入
 */
@Controller
@RequestMapping("prepositPay")
public class PrepositPayController {




    @RequestMapping("index")
    public String index(String user_id ){
        System.out.println(user_id);
        return "view/pay/prepositPay";
    }


    private static final String QUERY_BANKCARD_LIST = "query_bankcard_list"; // 查询已绑定银行卡列表
    private static final String QUERY_CARD_BIN      = "query_card_bin";     // 查询银行卡卡bin信息



    @RequestMapping("infoQuery")
    public void infoQuery(HttpServletRequest req, HttpServletResponse resp){
        try {
            req.setCharacterEncoding("utf-8");
            resp.setCharacterEncoding("utf-8");
            String operate = req.getParameter("operate");
            String resJson = "";
            if (QUERY_BANKCARD_LIST.equals(operate)) {
                resJson = queryBankcardList(req);
            } else if (QUERY_CARD_BIN.equals(operate)) {
                resJson = queryCardBin(req);
            } else {
                resJson = "{\"ret_code\":\"9999\",\"ret_msg\":\"非法交易\"}";
            }
            resp.getWriter().write(resJson);
            resp.getWriter().flush();
            resp.getWriter().close();
        }catch (Exception e){
            e.printStackTrace();
        }
    }


    /**
     * 银行卡卡bin信息查询
     * @param req
     * @return
     */
    private String queryCardBin(HttpServletRequest req)
    {

        JSONObject reqObj = new JSONObject();
        if(req.getParameter("type")!=null&&req.getParameter("type").equals("android")){
            reqObj.put("oid_partner", PayConfig.OID_PARTNER_SDK);
            reqObj.put("card_no", req.getParameter("card_no"));
            reqObj.put("sign_type", PayConfig.SIGN_TYPE);
            String sign = LLPayUtil.addSign(reqObj, PayConfig.RSA_PRIVATE_SDK,
                    PayConfig.MD5_KEY_SDK);
            reqObj.put("sign", sign);
        }else {
            reqObj.put("oid_partner", PayConfig.OID_PARTNER);
            reqObj.put("card_no", req.getParameter("card_no"));
            reqObj.put("sign_type", PayConfig.SIGN_TYPE);
            String sign = LLPayUtil.addSign(reqObj, PayConfig.TRADER_PRI_KEY,
                    PayConfig.MD5_KEY);
            reqObj.put("sign", sign);
        }
        String reqJSON = reqObj.toString();
        System.out.println("银行卡卡bin信息查询请求报文[" + reqJSON + "]");
        String resJSON = HttpRequestSimple.getInstance().postSendHttp(
                PayConfig.QUERY_BANKCARD_URL, reqJSON);
        System.out.println("银行卡卡bin信息查询响应报文[" + resJSON + "]");
        return resJSON;
    }

    /**
     * 用户已绑定银行列表查询
     * @param req
     * @return
     */
    private String queryBankcardList(HttpServletRequest req)
    {
        JSONObject reqObj = new JSONObject();
        if(req.getParameter("type")!=null&&req.getParameter("type").equals("android")){
            reqObj.put("oid_partner", PayConfig.OID_PARTNER_SDK);
            reqObj.put("user_id", req.getParameter("user_id"));
            reqObj.put("offset", "0");
            reqObj.put("sign_type", PayConfig.SIGN_TYPE);
            reqObj.put("pay_type", "D");
            String sign = LLPayUtil.addSign(reqObj, PayConfig.RSA_PRIVATE_SDK,
                    PayConfig.MD5_KEY_SDK);
            reqObj.put("sign", sign);
        }else{
            reqObj.put("oid_partner", PayConfig.OID_PARTNER);
            reqObj.put("user_id", req.getParameter("user_id"));
            reqObj.put("offset", "0");
            reqObj.put("sign_type", PayConfig.SIGN_TYPE);
            reqObj.put("pay_type", "D");
            String sign = LLPayUtil.addSign(reqObj, PayConfig.TRADER_PRI_KEY,
                    PayConfig.MD5_KEY);
            reqObj.put("sign", sign);
        }

        String reqJSON = reqObj.toString();
        System.out.println("用户已绑定银行列表查询请求报文[" + reqJSON + "]");
        String resJSON = HttpRequestSimple.getInstance().postSendHttp(
                PayConfig.QUERY_USER_BANKCARD_URL, reqJSON);
        System.out.println("用户已绑定银行列表查询响应报文[" + resJSON + "]");
        return resJSON;
    }



    @RequestMapping("toPay")
    public String toPay(HttpServletRequest req, HttpServletResponse resp){
        String view="";
        try {
            req.setCharacterEncoding("utf-8");
            resp.setCharacterEncoding("utf-8");
            // 创建订单
            OrderInfo order = createOrder(req);
            RequestDispatcher dispatcher = null;
            String paymod = req.getParameter("paymod");
            if ("plain".equals(paymod)) {
                plainPay(req, order);
               view="view/pay/gotoPlainPay";
            } else {
                prepositPay(req, order);
               view="view/pay/gotoPrepositPay";
            }

        }catch (Exception e){
            e.printStackTrace();
        }
        return view;
    }

    /**
     * 卡前置支付处理
     * @param req
     * @param order
     */
    private void prepositPay(HttpServletRequest req, OrderInfo order)
    {
        // 构造支付请求对象
        PaymentInfo paymentInfo = new PaymentInfo();
        paymentInfo.setVersion(PayConfig.VERSION);
        paymentInfo.setOid_partner(PayConfig.OID_PARTNER);
        paymentInfo.setUser_id(req.getParameter("user_id"));
        paymentInfo.setSign_type(PayConfig.SIGN_TYPE);
        paymentInfo.setBusi_partner(PayConfig.BUSI_PARTNER);
        paymentInfo.setNo_order(order.getNo_order());
        paymentInfo.setDt_order(order.getDt_order());
        paymentInfo.setName_goods(order.getName_goods());
        paymentInfo.setInfo_order(order.getInfo_order());
        paymentInfo.setMoney_order(order.getMoney_order());
        paymentInfo.setNotify_url(PayConfig.NOTIFY_URL);
        paymentInfo.setUrl_return(PayConfig.URL_RETURN);
        paymentInfo.setUserreq_ip(LLPayUtil.getIpAddr(req).replaceAll("\\.",
                "_"));
        paymentInfo.setUrl_order("");
        paymentInfo.setValid_order("10080");// 单位分钟，可以为空，默认7天
        paymentInfo.setRisk_item(createRiskItem());
        paymentInfo.setTimestamp(LLPayUtil.getCurrentDateTimeStr());
        // 商戶从自己系统中获取用户身份信息（认证支付必须将用户身份信息传输给连连，且修改标记flag_modify设置成1：不可修改）
        paymentInfo.setId_type("0");
        paymentInfo.setId_no("41128219920708551X");
        paymentInfo.setAcct_name("高雄辉");
        paymentInfo.setFlag_modify("1");
        if (!LLPayUtil.isnull(req.getParameter("no_agree")))
        {// 协议号和卡号同时存在时，优先将协议号送给连连，不要将协议号和卡号都送给连连
            paymentInfo.setNo_agree(req.getParameter("no_agree"));
        } else
        {
            paymentInfo.setCard_no(req.getParameter("card_no"));
        }
        paymentInfo.setBack_url("http://www.lianlianpay.com/");
        // 加签名
        String sign = LLPayUtil.addSign(JSON.parseObject(JSON
                        .toJSONString(paymentInfo)), PayConfig.TRADER_PRI_KEY,
                PayConfig.MD5_KEY);
        paymentInfo.setSign(sign);

        req.setAttribute("version", paymentInfo.getVersion());
        req.setAttribute("oid_partner", paymentInfo.getOid_partner());
        req.setAttribute("user_id", paymentInfo.getUser_id());
        req.setAttribute("sign_type", paymentInfo.getSign_type());
        req.setAttribute("busi_partner", paymentInfo.getBusi_partner());
        req.setAttribute("no_order", paymentInfo.getNo_order());
        req.setAttribute("dt_order", paymentInfo.getDt_order());
        req.setAttribute("name_goods", paymentInfo.getName_goods());
        req.setAttribute("info_order", paymentInfo.getInfo_order());
        req.setAttribute("money_order", paymentInfo.getMoney_order());
        req.setAttribute("notify_url", paymentInfo.getNotify_url());
        req.setAttribute("url_return", paymentInfo.getUrl_return());
        req.setAttribute("userreq_ip", paymentInfo.getUserreq_ip());
        req.setAttribute("url_order", paymentInfo.getUrl_order());
        req.setAttribute("valid_order", paymentInfo.getValid_order());
        req.setAttribute("timestamp", paymentInfo.getTimestamp());
        req.setAttribute("sign", paymentInfo.getSign());
        req.setAttribute("risk_item", paymentInfo.getRisk_item());
        req.setAttribute("no_agree", paymentInfo.getNo_agree());
        req.setAttribute("id_type", paymentInfo.getId_type());
        req.setAttribute("id_no", paymentInfo.getId_no());
        req.setAttribute("acct_name", paymentInfo.getAcct_name());
        req.setAttribute("flag_modify", paymentInfo.getFlag_modify());
        req.setAttribute("card_no", paymentInfo.getCard_no());
        req.setAttribute("back_url", paymentInfo.getBack_url());
        req.setAttribute("req_url", PayConfig.PAY_URL);

    }

    /**
     * 根据连连支付风控部门要求的参数进行构造风控参数
     * @return
     */
    private String createRiskItem()
    {
        JSONObject riskItemObj = new JSONObject();
        riskItemObj.put("user_info_full_name", "你好");
        riskItemObj.put("frms_ware_category", "1999");
        return riskItemObj.toString();
    }

    /**
     * 普通支付处理
     * @param req
     * @param order
     */
    private void plainPay(HttpServletRequest req, OrderInfo order)
    {
        // 构造支付请求对象
        PaymentInfo paymentInfo = new PaymentInfo();
        paymentInfo.setVersion(PayConfig.VERSION);
        paymentInfo.setOid_partner(PayConfig.OID_PARTNER);
        paymentInfo.setUser_id(req.getParameter("user_id"));
        paymentInfo.setSign_type(PayConfig.SIGN_TYPE);
        paymentInfo.setBusi_partner(PayConfig.BUSI_PARTNER);
        paymentInfo.setNo_order(order.getNo_order());
        paymentInfo.setDt_order(order.getDt_order());
        paymentInfo.setName_goods(order.getName_goods());
        paymentInfo.setInfo_order(order.getInfo_order());
        paymentInfo.setMoney_order(order.getMoney_order());
        paymentInfo.setNotify_url(PayConfig.NOTIFY_URL);
        paymentInfo.setUrl_return(PayConfig.URL_RETURN);
        paymentInfo.setUserreq_ip(LLPayUtil.getIpAddr(req).replaceAll("\\.",
                "_"));
        paymentInfo.setUrl_order("");
        paymentInfo.setValid_order("10080");// 单位分钟，可以为空，默认7天
        paymentInfo.setTimestamp(LLPayUtil.getCurrentDateTimeStr());
        paymentInfo.setRisk_item(createRiskItem());
        // 商戶从自己系统中获取用户身份信息（认证支付必须将用户身份信息传输给连连，且修改标记flag_modify设置成1：不可修改）
        paymentInfo.setId_type("0");
        paymentInfo.setId_no("410782198912151334");
        paymentInfo.setAcct_name("连连");
        paymentInfo.setFlag_modify("1");
        // 加签名
        String sign = LLPayUtil.addSign(JSON.parseObject(JSON
                        .toJSONString(paymentInfo)), PayConfig.TRADER_PRI_KEY,
                PayConfig.MD5_KEY);
        paymentInfo.setSign(sign);

        req.setAttribute("version", paymentInfo.getVersion());
        req.setAttribute("oid_partner", paymentInfo.getOid_partner());
        req.setAttribute("user_id", paymentInfo.getUser_id());
        req.setAttribute("sign_type", paymentInfo.getSign_type());
        req.setAttribute("busi_partner", paymentInfo.getBusi_partner());
        req.setAttribute("no_order", paymentInfo.getNo_order());
        req.setAttribute("dt_order", paymentInfo.getDt_order());
        req.setAttribute("name_goods", paymentInfo.getName_goods());
        req.setAttribute("info_order", paymentInfo.getInfo_order());
        req.setAttribute("money_order", paymentInfo.getMoney_order());
        req.setAttribute("notify_url", paymentInfo.getNotify_url());
        req.setAttribute("url_return", paymentInfo.getUrl_return());
        req.setAttribute("userreq_ip", paymentInfo.getUserreq_ip());
        req.setAttribute("url_order", paymentInfo.getUrl_order());
        req.setAttribute("valid_order", paymentInfo.getValid_order());
        req.setAttribute("timestamp", paymentInfo.getTimestamp());
        req.setAttribute("sign", paymentInfo.getSign());
        req.setAttribute("risk_item", paymentInfo.getRisk_item());
        req.setAttribute("id_type", paymentInfo.getId_type());
        req.setAttribute("id_no", paymentInfo.getId_no());
        req.setAttribute("acct_name", paymentInfo.getAcct_name());
        req.setAttribute("flag_modify", paymentInfo.getFlag_modify());
        req.setAttribute("req_url", PayConfig.PAY_URL);

    }

    /**
     * 模拟商户创建订单
     * @param req
     * @return
     */
    private OrderInfo createOrder(HttpServletRequest req)
    {
        OrderInfo orderInfo = new OrderInfo();
        orderInfo.setNo_order(LLPayUtil.getCurrentDateTimeStr());
        orderInfo.setDt_order(LLPayUtil.getCurrentDateTimeStr());
        orderInfo.setMoney_order(req.getParameter("money_order"));
        orderInfo.setName_goods(req.getParameter("name_goods"));
        orderInfo.setInfo_order("用户购买" + req.getParameter("name_goods"));
        return orderInfo;
    }

    @RequestMapping("receiveNotify")
    public void receiveNotify(HttpServletRequest req, HttpServletResponse resp) {
        try{
        resp.setCharacterEncoding("UTF-8");
        System.out.println("进入支付异步通知数据接收处理");
        RetBean retBean = new RetBean();
        String reqStr = LLPayUtil.readReqStr(req);
        if (LLPayUtil.isnull(reqStr)) {
            retBean.setRet_code("9999");
            retBean.setRet_msg("交易失败");
            resp.getWriter().write(JSON.toJSONString(retBean));
            resp.getWriter().flush();
            return;
        }
        System.out.println("接收支付异步通知数据：【" + reqStr + "】");
        try {
            if (!LLPayUtil.checkSign(reqStr, PayConfig.RSA_PRIVATE_SDK,
                    PayConfig.MD5_KEY_SDK)) {
                retBean.setRet_code("9999");
                retBean.setRet_msg("交易失败");
                resp.getWriter().write(JSON.toJSONString(retBean));
                resp.getWriter().flush();
                System.out.println("支付异步通知验签失败");
                return;
            }
        } catch (Exception e) {
            System.out.println("异步通知报文解析异常：" + e);
            retBean.setRet_code("9999");
            retBean.setRet_msg("交易失败");
            resp.getWriter().write(JSON.toJSONString(retBean));
            resp.getWriter().flush();
            return;
        }
        retBean.setRet_code("0000");
        retBean.setRet_msg("交易成功");
        resp.getWriter().write(JSON.toJSONString(retBean));
        resp.getWriter().flush();
        System.out.println("支付异步通知数据接收处理成功");
        // 解析异步通知对象
        PayDataBean payDataBean = JSON.parseObject(reqStr, PayDataBean.class);
        // TODO:更新订单，发货等后续处理
    }catch(Exception e){
        e.printStackTrace();
    }
    }

    @RequestMapping("payUrlReturn")
    public String payReturn(){
        return "view/pay/urlReturn";
    }
}
